name: HandyShare CI/CD

on:
  push:
    branches:
      - Development
  pull_request:
    branches:
      - Development
  workflow_dispatch:

jobs:
  frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Navigate to frontend
        working-directory: ./handyShare/Frontend
        run: echo "Navigating to frontend folder"

      - name: Install dependencies
        working-directory: ./handyShare/Frontend
        run: npm install

      - name: Build frontend
        working-directory: ./handyShare/Frontend
        run: |
          CI=false npm run build

  backend:
    runs-on: ubuntu-latest
    needs: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Navigate to backend
        working-directory: ./handyShare/Backend
        run: echo "Navigating to backend folder"

      - name: Build backend
        working-directory: ./handyShare/Backend
        run: mvn clean install

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Package backend
        working-directory: ./handyShare/Backend
        run: mvn package
        
      name: Run Code Quality Checks and Deploy

on:
  push:
    branches:
      - main

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Create CSV output directory
      - name: Create CSV Output Directory
        run: mkdir -p ./handyShare/code_quality/report

      # Step 3: Run the Java JAR file
      - name: Run Java JAR File
        run: java -jar ./handyShare/code_quality/DesigniteJava.jar -i ./handyShare/Backend/ -o ./handyShare/code_quality/report

      # Step 4: Show the current directory
      - name: Show Current Directory
        run: pwd

      # Step 5: List directory contents
      - name: List Directory Contents
        run: ls -la ./handyShare/code_quality/report

      # Step 6: Install Python dependencies
      - name: Install Python Dependencies
        run: |
          pip install -r ./handyShare/code_quality/requirements.txt

      # Step 7: Run the Python script to create issues
      - name: Open Issues
        run: python ./handyShare/code_quality/create_issue.py ${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy (Placeholder)
        run: echo "Add your deploy steps here"

  
  deploy:
    runs-on: self-hosted
    needs: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker build environment
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Build and push frontend Docker image
      - name: Build and push frontend Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t handyshare-app-frontend:${{ github.sha }} ./handyShare/Frontend
          docker tag handyshare-app-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/handyshare-app-frontend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/handyshare-app-frontend:${{ github.sha }}

      # Build and push backend Docker image
      - name: Build and push backend Docker image
        run: |
          cd handyShare/Backend
          mvn package
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t handyshare-app-backend:${{ github.sha }} .
          docker tag handyshare-app-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/handyshare-app-backend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/handyshare-app-backend:${{ github.sha }}

      # Deploy the frontend Docker container
      - name: Deploy frontend Docker container
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/handyshare-app-frontend:${{ github.sha }}
          docker stop handyshare-app-frontend || true
          docker rm handyshare-app-frontend || true
          docker run -d --name handyshare-app-frontend ${{ secrets.DOCKER_USERNAME }}/handyshare-app-frontend:${{ github.sha }}

      # Deploy the backend Docker container
      - name: Deploy backend Docker container
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/handyshare-app-backend:${{ github.sha }}
          docker stop handyshare-app-backend || true
          docker rm handyshare-app-backend || true
          docker run -d --name handyshare-app-backend -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/handyshare-app-backend:${{ github.sha }}
